---
import Cross from "../Icons/Cross.astro";
import Preloader from "../Icons/Preloader.astro";
import Status from "./Status.astro";
const lists = [
  "1",
  "5",
  "6",
  "7",
  "8",
  "9",
  "10",
  "11",
  "12",
  "13",
  "14",
  "15",
  "16",
  "18",
  "19",
  "20",
  "21",
  "23",
  "24",
  "25",
  "26",
];
const params = [
  {
    name: "charset",
    value: "UTF-8",
  },
  {
    name: "default_list_id",
    value: "1",
  },
  {
    name: "overwrite",
    value: "2",
  },
  {
    name: "is_v5",
    value: "1",
  },
];
---

<div class="container" style="display: flex; justify-content: center;">
  <form
    class="fap-form-subscribe"
    name="subscribtion_form"
    method="POST"
    action="https://cp.unisender.com/ru/subscribe?hash=6np8mqgujmuiw45ks4t9cep49z8ikr3pw3bcdyrgn3ppej4hkbcfy"
  >
    <h2 class="fap-form-subscribe__title">Подпишитесь на основную рассылку</h2>
    <p>
      Будьте в курсе актуальных новостей компании, новых технологий и
      нестандартных решений для воплощения самых смелых идей в сфере
      коммерческой полиграфии.
    </p>
    <div class="fap-form-subscribe-field">
      <div class="fap-form-subscribe-field-wrap">
        <input
          class="fap-form-subscribe-field__input-email"
          type="email"
          placeholder="Email:"
          required
        />
        <button class="fap-form-subscribe-field__input-reset" type="reset">
          <Cross />
        </button>
      </div>

      <div class="fap-form-subscribe-field__line"></div>
      <button class="fap-form-subscribe-field__submit" type="submit">Подписаться</button>
    </div>
    <Status disabled={false} status="pending">Загрузка</Status>
    <Status disabled={true} status="error">Ошибка! Попробуйте ещё раз</Status>
    <Status disabled={false} status="success">Готово</Status>
    {
      lists.map((id) => (
        <>
          <input type="hidden" name="list_ids[]" value={id} />
        </>
      ))
    }
    {
      params.map((param) => (
        <>
          <input type="hidden" name={param.name} value={param.value} />
        </>
      ))
    }
    <div class="fap-form-subscribe-confirm">
      <div>

      </div>
      <input hidden type="checkbox" name="confirm" id="confirm" required />
      <label for="confirm">Я согласен с политикой конфиденциальности</label>
    </div>
  </form>
</div>

<style lang="scss" is:global>
  .fap-form-subscribe {
    background-color: var(--color-light-gray);
    max-width: 400px;
    padding: 1.42em;
    display: flex;
    flex-direction: column;
    gap: 1.42em;

    * {
      font-family: "Roboto", "Helvetica Neue", sans-serif;
      margin: 0;
    }
  }
  .fap-form-subscribe__title {
    font-size: 1em;
    text-transform: uppercase;
  }
  .fap-form-subscribe-field-wrap {
    flex: 1;
    display: flex;
    align-items: center;
  }
  .fap-form-subscribe-field {
    display: flex;
    background-color: var(--color-white);
    padding: 0.85em;
    transition: var(--animate-default);
    transition-property: border;
    border: 2px solid transparent;
  }
  .fap-form-subscribe-field__input-reset {
    border: none;
    background-color: transparent;
    outline: none;
  }

  .fap-form-subscribe-field__line {
    width: 2px;
    height: 20px;
    margin: 0 5px;
    background-color: var(--color-black);
  }
  .fap-form-subscribe-field__submit {
    background-color: transparent;
    font-weight: 500;
    color: var(--color-primary);
    border: none;
    cursor: pointer;
  }
  .fap-form-subscribe-field__input-email {
    flex: 1;
    background-color: transparent;
    border: none;
    outline: none;
  }
  .fap-form-subscribe-field:has(> .fap-form-subscribe-field__input-email:focus),
  .fap-form-subscribe-field:hover {
    border: 2px solid var(--color-primary);
  }
  .fap-form-subscribe-confirm {
    display: flex;
    align-items: center;
    position: relative;
    padding: 0 0 0 1.42em;
  }
  .fap-form-subscribe-confirm label {
    position: relative;
    padding: 0 0 0 1em;
  }
  .fap-form-subscribe-confirm label::before {
    content: "";
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    left: -20px;
    width: 20px;
    height: 20px;
    background-image: url(https://static.wow2print.com/storage/245/content/image/90930578266719a65d9af03.93046006.svg);
    transition: var(--animate-default);
  }

  .fap-form-subscribe-confirm:has(input[type="checkbox"]:checked) {
    position: relative;
  }

  .fap-form-subscribe-confirm input:checked + label::before {
    background-image: url(https://static.wow2print.com/storage/245/content/image/94275259066719a645797d2.27350813.svg);
  }
</style>

<script>
  const form = document.querySelector('.fap-form-subscribe');
  form.addEventListener("submit", (e) => {

  e.preventDefault();
  const formData = new FormData();
  console.log(formData);


  // let formData = new FormData(form);
  // var fieldsEmptyLength = 0;

  // const   showColorSuccessMessage = () => {
  //             messageSubmit.classList.remove(`${classNameMessage}--error`);
  //             messageSubmit.classList.add(`${classNameMessage}--success`);
  //         },
  //         showColorErrorMessage = () => {
  //             messageSubmit.classList.remove(`${classNameMessage}--success`);
  //             messageSubmit.classList.add(`${classNameMessage}--error`);
  //         };

  // for (let pair of formData.entries()) {

  //     var inputBlock = document.getElementById(`${pair[0]}`).closest(`.${classNameBlockField}`);

  //     if(!pair[1]) {
  //         inputBlock.classList.add(`${classNameBlockField}--error`);
  //         inputBlock.querySelector(`.${classNameMessage}`).classList.add(`${classNameMessage}--error`);
  //         inputBlock.querySelector(`.${classNameMessage}`).innerHTML = `Обязательно к заполнению`;
  //         fieldsEmptyLength++;
  //     }
  //     else {
  //         inputBlock.classList.remove(`${classNameBlockField}--error`);
  //         inputBlock.querySelector(`.${classNameMessage}`).classList.remove(`${classNameMessage}--error`);
  //         inputBlock.querySelector(`.${classNameMessage}`).innerHTML = ``;
  //     }

  // }

  // if (!fieldsEmptyLength > 0) {

  //     fetch(e.target.action, {
  //         method: form.method,
  //         body: formData,
  //         headers: {
  //             'Accept': 'application/json'
  //         }
  //     })
  //     .then(response => {
  //         if (response.ok) {
  //             messageSubmit.innerHTML = `Data sent successfully!`;
  //             showColorSuccessMessage();
  //             form.reset();
  //         } else {
  //             response.json().then(data => {
  //             if (Object.hasOwn(data, 'errors')) {
  //                 messageSubmit.innerHTML = data["errors"].map(error => error["message"]).join(", ");
  //                 showColorErrorMessage();
  //             } else {
  //                 messageSubmit.innerHTML = "Oops! There was a problem submitting your form";
  //                 showColorErrorMessage();
  //             }
  //             })
  //         }
  //     })
  //     .catch(error => {
  //         messageSubmit.innerHTML = "Oops! There was a problem submitting your form";
  //         showColorErrorMessage();
  //     });
  // }
  });
</script>
